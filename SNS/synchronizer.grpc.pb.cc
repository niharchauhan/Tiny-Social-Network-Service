// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: synchronizer.proto

#include "synchronizer.pb.h"
#include "synchronizer.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace csce438 {

static const char* SynchService_method_names[] = {
  "/csce438.SynchService/GetAllUsers",
  "/csce438.SynchService/GetFL",
  "/csce438.SynchService/GetTL",
  "/csce438.SynchService/ResynchServer",
};

std::unique_ptr< SynchService::Stub> SynchService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SynchService::Stub> stub(new SynchService::Stub(channel, options));
  return stub;
}

SynchService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAllUsers_(SynchService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFL_(SynchService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTL_(SynchService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResynchServer_(SynchService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SynchService::Stub::GetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::csce438::AllUsers* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::GetAllUsersRequest, ::csce438::AllUsers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllUsers_, context, request, response);
}

void SynchService::Stub::async::GetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest* request, ::csce438::AllUsers* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::GetAllUsersRequest, ::csce438::AllUsers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllUsers_, context, request, response, std::move(f));
}

void SynchService::Stub::async::GetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest* request, ::csce438::AllUsers* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>* SynchService::Stub::PrepareAsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::AllUsers, ::csce438::GetAllUsersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>* SynchService::Stub::AsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SynchService::Stub::GetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::csce438::GetFLResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::GetFLRequest, ::csce438::GetFLResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFL_, context, request, response);
}

void SynchService::Stub::async::GetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest* request, ::csce438::GetFLResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::GetFLRequest, ::csce438::GetFLResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFL_, context, request, response, std::move(f));
}

void SynchService::Stub::async::GetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest* request, ::csce438::GetFLResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::GetFLResponse>* SynchService::Stub::PrepareAsyncGetFLRaw(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::GetFLResponse, ::csce438::GetFLRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::GetFLResponse>* SynchService::Stub::AsyncGetFLRaw(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFLRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SynchService::Stub::GetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::csce438::GetTLResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::GetTLRequest, ::csce438::GetTLResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTL_, context, request, response);
}

void SynchService::Stub::async::GetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest* request, ::csce438::GetTLResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::GetTLRequest, ::csce438::GetTLResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTL_, context, request, response, std::move(f));
}

void SynchService::Stub::async::GetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest* request, ::csce438::GetTLResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::GetTLResponse>* SynchService::Stub::PrepareAsyncGetTLRaw(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::GetTLResponse, ::csce438::GetTLRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::GetTLResponse>* SynchService::Stub::AsyncGetTLRaw(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTLRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SynchService::Stub::ResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::csce438::ResynchServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::ResynchServerRequest, ::csce438::ResynchServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResynchServer_, context, request, response);
}

void SynchService::Stub::async::ResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest* request, ::csce438::ResynchServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::ResynchServerRequest, ::csce438::ResynchServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResynchServer_, context, request, response, std::move(f));
}

void SynchService::Stub::async::ResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest* request, ::csce438::ResynchServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResynchServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::ResynchServerResponse>* SynchService::Stub::PrepareAsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::ResynchServerResponse, ::csce438::ResynchServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResynchServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::ResynchServerResponse>* SynchService::Stub::AsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResynchServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

SynchService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SynchService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SynchService::Service, ::csce438::GetAllUsersRequest, ::csce438::AllUsers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SynchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::GetAllUsersRequest* req,
             ::csce438::AllUsers* resp) {
               return service->GetAllUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SynchService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SynchService::Service, ::csce438::GetFLRequest, ::csce438::GetFLResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SynchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::GetFLRequest* req,
             ::csce438::GetFLResponse* resp) {
               return service->GetFL(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SynchService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SynchService::Service, ::csce438::GetTLRequest, ::csce438::GetTLResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SynchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::GetTLRequest* req,
             ::csce438::GetTLResponse* resp) {
               return service->GetTL(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SynchService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SynchService::Service, ::csce438::ResynchServerRequest, ::csce438::ResynchServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SynchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::ResynchServerRequest* req,
             ::csce438::ResynchServerResponse* resp) {
               return service->ResynchServer(ctx, req, resp);
             }, this)));
}

SynchService::Service::~Service() {
}

::grpc::Status SynchService::Service::GetAllUsers(::grpc::ServerContext* context, const ::csce438::GetAllUsersRequest* request, ::csce438::AllUsers* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SynchService::Service::GetFL(::grpc::ServerContext* context, const ::csce438::GetFLRequest* request, ::csce438::GetFLResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SynchService::Service::GetTL(::grpc::ServerContext* context, const ::csce438::GetTLRequest* request, ::csce438::GetTLResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SynchService::Service::ResynchServer(::grpc::ServerContext* context, const ::csce438::ResynchServerRequest* request, ::csce438::ResynchServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace csce438

