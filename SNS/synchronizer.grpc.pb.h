// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: synchronizer.proto
#ifndef GRPC_synchronizer_2eproto__INCLUDED
#define GRPC_synchronizer_2eproto__INCLUDED

#include "synchronizer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace csce438 {

class SynchService final {
 public:
  static constexpr char const* service_full_name() {
    return "csce438.SynchService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::csce438::AllUsers* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>> AsyncGetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>>(AsyncGetAllUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>> PrepareAsyncGetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>>(PrepareAsyncGetAllUsersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::csce438::GetFLResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetFLResponse>> AsyncGetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetFLResponse>>(AsyncGetFLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetFLResponse>> PrepareAsyncGetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetFLResponse>>(PrepareAsyncGetFLRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::csce438::GetTLResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetTLResponse>> AsyncGetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetTLResponse>>(AsyncGetTLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetTLResponse>> PrepareAsyncGetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetTLResponse>>(PrepareAsyncGetTLRaw(context, request, cq));
    }
    virtual ::grpc::Status ResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::csce438::ResynchServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ResynchServerResponse>> AsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ResynchServerResponse>>(AsyncResynchServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ResynchServerResponse>> PrepareAsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ResynchServerResponse>>(PrepareAsyncResynchServerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest* request, ::csce438::AllUsers* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest* request, ::csce438::AllUsers* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest* request, ::csce438::GetFLResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest* request, ::csce438::GetFLResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest* request, ::csce438::GetTLResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest* request, ::csce438::GetTLResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest* request, ::csce438::ResynchServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest* request, ::csce438::ResynchServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>* AsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>* PrepareAsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetFLResponse>* AsyncGetFLRaw(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetFLResponse>* PrepareAsyncGetFLRaw(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetTLResponse>* AsyncGetTLRaw(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::GetTLResponse>* PrepareAsyncGetTLRaw(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ResynchServerResponse>* AsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ResynchServerResponse>* PrepareAsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::csce438::AllUsers* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>> AsyncGetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>>(AsyncGetAllUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>> PrepareAsyncGetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>>(PrepareAsyncGetAllUsersRaw(context, request, cq));
    }
    ::grpc::Status GetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::csce438::GetFLResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::GetFLResponse>> AsyncGetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::GetFLResponse>>(AsyncGetFLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::GetFLResponse>> PrepareAsyncGetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::GetFLResponse>>(PrepareAsyncGetFLRaw(context, request, cq));
    }
    ::grpc::Status GetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::csce438::GetTLResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::GetTLResponse>> AsyncGetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::GetTLResponse>>(AsyncGetTLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::GetTLResponse>> PrepareAsyncGetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::GetTLResponse>>(PrepareAsyncGetTLRaw(context, request, cq));
    }
    ::grpc::Status ResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::csce438::ResynchServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ResynchServerResponse>> AsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ResynchServerResponse>>(AsyncResynchServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ResynchServerResponse>> PrepareAsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ResynchServerResponse>>(PrepareAsyncResynchServerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest* request, ::csce438::AllUsers* response, std::function<void(::grpc::Status)>) override;
      void GetAllUsers(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest* request, ::csce438::AllUsers* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest* request, ::csce438::GetFLResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFL(::grpc::ClientContext* context, const ::csce438::GetFLRequest* request, ::csce438::GetFLResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest* request, ::csce438::GetTLResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTL(::grpc::ClientContext* context, const ::csce438::GetTLRequest* request, ::csce438::GetTLResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest* request, ::csce438::ResynchServerResponse* response, std::function<void(::grpc::Status)>) override;
      void ResynchServer(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest* request, ::csce438::ResynchServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>* AsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>* PrepareAsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::GetAllUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::GetFLResponse>* AsyncGetFLRaw(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::GetFLResponse>* PrepareAsyncGetFLRaw(::grpc::ClientContext* context, const ::csce438::GetFLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::GetTLResponse>* AsyncGetTLRaw(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::GetTLResponse>* PrepareAsyncGetTLRaw(::grpc::ClientContext* context, const ::csce438::GetTLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ResynchServerResponse>* AsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ResynchServerResponse>* PrepareAsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ResynchServerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFL_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTL_;
    const ::grpc::internal::RpcMethod rpcmethod_ResynchServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAllUsers(::grpc::ServerContext* context, const ::csce438::GetAllUsersRequest* request, ::csce438::AllUsers* response);
    virtual ::grpc::Status GetFL(::grpc::ServerContext* context, const ::csce438::GetFLRequest* request, ::csce438::GetFLResponse* response);
    virtual ::grpc::Status GetTL(::grpc::ServerContext* context, const ::csce438::GetTLRequest* request, ::csce438::GetTLResponse* response);
    virtual ::grpc::Status ResynchServer(::grpc::ServerContext* context, const ::csce438::ResynchServerRequest* request, ::csce438::ResynchServerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::GetAllUsersRequest* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllUsers(::grpc::ServerContext* context, ::csce438::GetAllUsersRequest* request, ::grpc::ServerAsyncResponseWriter< ::csce438::AllUsers>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFL() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFL(::grpc::ServerContext* /*context*/, const ::csce438::GetFLRequest* /*request*/, ::csce438::GetFLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFL(::grpc::ServerContext* context, ::csce438::GetFLRequest* request, ::grpc::ServerAsyncResponseWriter< ::csce438::GetFLResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTL() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTL(::grpc::ServerContext* /*context*/, const ::csce438::GetTLRequest* /*request*/, ::csce438::GetTLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTL(::grpc::ServerContext* context, ::csce438::GetTLRequest* request, ::grpc::ServerAsyncResponseWriter< ::csce438::GetTLResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResynchServer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ResynchServerRequest* /*request*/, ::csce438::ResynchServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResynchServer(::grpc::ServerContext* context, ::csce438::ResynchServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::csce438::ResynchServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAllUsers<WithAsyncMethod_GetFL<WithAsyncMethod_GetTL<WithAsyncMethod_ResynchServer<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::GetAllUsersRequest, ::csce438::AllUsers>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::GetAllUsersRequest* request, ::csce438::AllUsers* response) { return this->GetAllUsers(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllUsers(
        ::grpc::MessageAllocator< ::csce438::GetAllUsersRequest, ::csce438::AllUsers>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::GetAllUsersRequest, ::csce438::AllUsers>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::GetAllUsersRequest* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::GetAllUsersRequest* /*request*/, ::csce438::AllUsers* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFL() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::GetFLRequest, ::csce438::GetFLResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::GetFLRequest* request, ::csce438::GetFLResponse* response) { return this->GetFL(context, request, response); }));}
    void SetMessageAllocatorFor_GetFL(
        ::grpc::MessageAllocator< ::csce438::GetFLRequest, ::csce438::GetFLResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::GetFLRequest, ::csce438::GetFLResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFL(::grpc::ServerContext* /*context*/, const ::csce438::GetFLRequest* /*request*/, ::csce438::GetFLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFL(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::GetFLRequest* /*request*/, ::csce438::GetFLResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTL() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::GetTLRequest, ::csce438::GetTLResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::GetTLRequest* request, ::csce438::GetTLResponse* response) { return this->GetTL(context, request, response); }));}
    void SetMessageAllocatorFor_GetTL(
        ::grpc::MessageAllocator< ::csce438::GetTLRequest, ::csce438::GetTLResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::GetTLRequest, ::csce438::GetTLResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTL(::grpc::ServerContext* /*context*/, const ::csce438::GetTLRequest* /*request*/, ::csce438::GetTLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTL(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::GetTLRequest* /*request*/, ::csce438::GetTLResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResynchServer() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ResynchServerRequest, ::csce438::ResynchServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ResynchServerRequest* request, ::csce438::ResynchServerResponse* response) { return this->ResynchServer(context, request, response); }));}
    void SetMessageAllocatorFor_ResynchServer(
        ::grpc::MessageAllocator< ::csce438::ResynchServerRequest, ::csce438::ResynchServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ResynchServerRequest, ::csce438::ResynchServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ResynchServerRequest* /*request*/, ::csce438::ResynchServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResynchServer(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ResynchServerRequest* /*request*/, ::csce438::ResynchServerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAllUsers<WithCallbackMethod_GetFL<WithCallbackMethod_GetTL<WithCallbackMethod_ResynchServer<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::GetAllUsersRequest* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFL() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFL(::grpc::ServerContext* /*context*/, const ::csce438::GetFLRequest* /*request*/, ::csce438::GetFLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTL() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTL(::grpc::ServerContext* /*context*/, const ::csce438::GetTLRequest* /*request*/, ::csce438::GetTLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResynchServer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ResynchServerRequest* /*request*/, ::csce438::ResynchServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::GetAllUsersRequest* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFL() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFL(::grpc::ServerContext* /*context*/, const ::csce438::GetFLRequest* /*request*/, ::csce438::GetFLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTL() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTL(::grpc::ServerContext* /*context*/, const ::csce438::GetTLRequest* /*request*/, ::csce438::GetTLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResynchServer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ResynchServerRequest* /*request*/, ::csce438::ResynchServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResynchServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::GetAllUsersRequest* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFL() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFL(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFL(::grpc::ServerContext* /*context*/, const ::csce438::GetFLRequest* /*request*/, ::csce438::GetFLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTL() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTL(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTL(::grpc::ServerContext* /*context*/, const ::csce438::GetTLRequest* /*request*/, ::csce438::GetTLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResynchServer() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResynchServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ResynchServerRequest* /*request*/, ::csce438::ResynchServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResynchServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::GetAllUsersRequest, ::csce438::AllUsers>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::GetAllUsersRequest, ::csce438::AllUsers>* streamer) {
                       return this->StreamedGetAllUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::GetAllUsersRequest* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::GetAllUsersRequest,::csce438::AllUsers>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFL() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::GetFLRequest, ::csce438::GetFLResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::GetFLRequest, ::csce438::GetFLResponse>* streamer) {
                       return this->StreamedGetFL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFL(::grpc::ServerContext* /*context*/, const ::csce438::GetFLRequest* /*request*/, ::csce438::GetFLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::GetFLRequest,::csce438::GetFLResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTL() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::GetTLRequest, ::csce438::GetTLResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::GetTLRequest, ::csce438::GetTLResponse>* streamer) {
                       return this->StreamedGetTL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTL(::grpc::ServerContext* /*context*/, const ::csce438::GetTLRequest* /*request*/, ::csce438::GetTLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::GetTLRequest,::csce438::GetTLResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResynchServer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ResynchServerRequest, ::csce438::ResynchServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ResynchServerRequest, ::csce438::ResynchServerResponse>* streamer) {
                       return this->StreamedResynchServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ResynchServerRequest* /*request*/, ::csce438::ResynchServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResynchServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ResynchServerRequest,::csce438::ResynchServerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAllUsers<WithStreamedUnaryMethod_GetFL<WithStreamedUnaryMethod_GetTL<WithStreamedUnaryMethod_ResynchServer<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAllUsers<WithStreamedUnaryMethod_GetFL<WithStreamedUnaryMethod_GetTL<WithStreamedUnaryMethod_ResynchServer<Service > > > > StreamedService;
};

}  // namespace csce438


#endif  // GRPC_synchronizer_2eproto__INCLUDED
